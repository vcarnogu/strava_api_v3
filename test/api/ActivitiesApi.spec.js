/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StravaApiV3);
  }
}(this, function(expect, StravaApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StravaApiV3.ActivitiesApi();
  });

  describe('(package)', function() {
    describe('ActivitiesApi', function() {
      describe('createActivity', function() {
        it('should call createActivity successfully', function(done) {
          // TODO: uncomment, update parameter values for createActivity call and complete the assertions
          /*
          var name = "name_example";
          var type = "type_example";
          var startDateLocal = new Date("2013-10-20T19:20:30+01:00");
          var elapsedTime = 56;
          var opts = {};
          opts.description = "description_example";
          opts.distance = 3.4;
          opts.trainer = 56;
          opts.commute = 56;
          opts.hideFromHome = false;

          instance.createActivity(name, type, startDateLocal, elapsedTime, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StravaApiV3.DetailedActivity);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.externalId).to.be.a('string');
            expect(data.externalId).to.be("");
            expect(data.uploadId).to.be.a('number');
            expect(data.uploadId).to.be("0");
            expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                  expect(data.athlete.id).to.be.a('number');
              expect(data.athlete.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.distance).to.be.a('number');
            expect(data.distance).to.be(0.0);
            expect(data.movingTime).to.be.a('number');
            expect(data.movingTime).to.be(0);
            expect(data.elapsedTime).to.be.a('number');
            expect(data.elapsedTime).to.be(0);
            expect(data.totalElevationGain).to.be.a('number');
            expect(data.totalElevationGain).to.be(0.0);
            expect(data.elevHigh).to.be.a('number');
            expect(data.elevHigh).to.be(0.0);
            expect(data.elevLow).to.be.a('number');
            expect(data.elevLow).to.be(0.0);
            expect(data.type).to.be.a(StravaApiV3.ActivityType);
                expect(data.startDate).to.be.a(Date);
            expect(data.startDate).to.be(new Date());
            expect(data.startDateLocal).to.be.a(Date);
            expect(data.startDateLocal).to.be(new Date());
            expect(data.timezone).to.be.a('string');
            expect(data.timezone).to.be("");
            expect(data.startLatlng).to.be.a(StravaApiV3.LatLng);
                expect(data.endLatlng).to.be.a(StravaApiV3.LatLng);
                expect(data.achievementCount).to.be.a('number');
            expect(data.achievementCount).to.be(0);
            expect(data.kudosCount).to.be.a('number');
            expect(data.kudosCount).to.be(0);
            expect(data.commentCount).to.be.a('number');
            expect(data.commentCount).to.be(0);
            expect(data.athleteCount).to.be.a('number');
            expect(data.athleteCount).to.be(0);
            expect(data.photoCount).to.be.a('number');
            expect(data.photoCount).to.be(0);
            expect(data.totalPhotoCount).to.be.a('number');
            expect(data.totalPhotoCount).to.be(0);
            expect(data.map).to.be.a(StravaApiV3.PolylineMap);
                  expect(data.map.id).to.be.a('string');
              expect(data.map.id).to.be("");
              expect(data.map.polyline).to.be.a('string');
              expect(data.map.polyline).to.be("");
              expect(data.map.summaryPolyline).to.be.a('string');
              expect(data.map.summaryPolyline).to.be("");
            expect(data.trainer).to.be.a('boolean');
            expect(data.trainer).to.be(false);
            expect(data.commute).to.be.a('boolean');
            expect(data.commute).to.be(false);
            expect(data.manual).to.be.a('boolean');
            expect(data.manual).to.be(false);
            expect(data._private).to.be.a('boolean');
            expect(data._private).to.be(false);
            expect(data.flagged).to.be.a('boolean');
            expect(data.flagged).to.be(false);
            expect(data.workoutType).to.be.a('number');
            expect(data.workoutType).to.be(0);
            expect(data.uploadIdStr).to.be.a('string');
            expect(data.uploadIdStr).to.be("");
            expect(data.averageSpeed).to.be.a('number');
            expect(data.averageSpeed).to.be(0.0);
            expect(data.maxSpeed).to.be.a('number');
            expect(data.maxSpeed).to.be(0.0);
            expect(data.hasKudoed).to.be.a('boolean');
            expect(data.hasKudoed).to.be(false);
            expect(data.hideFromHome).to.be.a('boolean');
            expect(data.hideFromHome).to.be(false);
            expect(data.gearId).to.be.a('string');
            expect(data.gearId).to.be("");
            expect(data.kilojoules).to.be.a('number');
            expect(data.kilojoules).to.be(0.0);
            expect(data.averageWatts).to.be.a('number');
            expect(data.averageWatts).to.be(0.0);
            expect(data.deviceWatts).to.be.a('boolean');
            expect(data.deviceWatts).to.be(false);
            expect(data.maxWatts).to.be.a('number');
            expect(data.maxWatts).to.be(0);
            expect(data.weightedAverageWatts).to.be.a('number');
            expect(data.weightedAverageWatts).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.photos).to.be.a(StravaApiV3.PhotosSummary);
                  expect(data.photos.count).to.be.a('number');
              expect(data.photos.count).to.be(0);
              expect(data.photos.primary).to.be.a(StravaApiV3.PhotosSummaryPrimary);
                    expect(data.photos.primary.id).to.be.a('number');
                expect(data.photos.primary.id).to.be("0");
                expect(data.photos.primary.source).to.be.a('number');
                expect(data.photos.primary.source).to.be(0);
                expect(data.photos.primary.uniqueId).to.be.a('string');
                expect(data.photos.primary.uniqueId).to.be("");
                {
                  let dataCtr = data.photos.primary.urls;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
            expect(data.gear).to.be.a(StravaApiV3.SummaryGear);
                  expect(data.gear.id).to.be.a('string');
              expect(data.gear.id).to.be("");
              expect(data.gear.resourceState).to.be.a('number');
              expect(data.gear.resourceState).to.be(0);
              expect(data.gear.primary).to.be.a('boolean');
              expect(data.gear.primary).to.be(false);
              expect(data.gear.name).to.be.a('string');
              expect(data.gear.name).to.be("");
              expect(data.gear.distance).to.be.a('number');
              expect(data.gear.distance).to.be(0.0);
            expect(data.calories).to.be.a('number');
            expect(data.calories).to.be(0.0);
            {
              let dataCtr = data.segmentEfforts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.DetailedSegmentEffort);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activityId).to.be.a('number');
                expect(data.activityId).to.be("0");
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.isKom).to.be.a('boolean');
                expect(data.isKom).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageWatts).to.be.a('number');
                expect(data.averageWatts).to.be(0.0);
                expect(data.deviceWatts).to.be.a('boolean');
                expect(data.deviceWatts).to.be(false);
                expect(data.averageHeartrate).to.be.a('number');
                expect(data.averageHeartrate).to.be(0.0);
                expect(data.maxHeartrate).to.be.a('number');
                expect(data.maxHeartrate).to.be(0.0);
                expect(data.segment).to.be.a(StravaApiV3.SummarySegment);
                      expect(data.segment.id).to.be.a('number');
                  expect(data.segment.id).to.be("0");
                  expect(data.segment.name).to.be.a('string');
                  expect(data.segment.name).to.be("");
                  expect(data.segment.activityType).to.be.a('string');
                  expect(data.segment.activityType).to.be("Ride");
                  expect(data.segment.distance).to.be.a('number');
                  expect(data.segment.distance).to.be(0.0);
                  expect(data.segment.averageGrade).to.be.a('number');
                  expect(data.segment.averageGrade).to.be(0.0);
                  expect(data.segment.maximumGrade).to.be.a('number');
                  expect(data.segment.maximumGrade).to.be(0.0);
                  expect(data.segment.elevationHigh).to.be.a('number');
                  expect(data.segment.elevationHigh).to.be(0.0);
                  expect(data.segment.elevationLow).to.be.a('number');
                  expect(data.segment.elevationLow).to.be(0.0);
                  expect(data.segment.startLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.endLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.climbCategory).to.be.a('number');
                  expect(data.segment.climbCategory).to.be(0);
                  expect(data.segment.city).to.be.a('string');
                  expect(data.segment.city).to.be("");
                  expect(data.segment.state).to.be.a('string');
                  expect(data.segment.state).to.be("");
                  expect(data.segment.country).to.be.a('string');
                  expect(data.segment.country).to.be("");
                  expect(data.segment._private).to.be.a('boolean');
                  expect(data.segment._private).to.be(false);
                  expect(data.segment.athletePrEffort).to.be.a(StravaApiV3.SummarySegmentEffort);
                        expect(data.segment.athletePrEffort.id).to.be.a('number');
                    expect(data.segment.athletePrEffort.id).to.be("0");
                    expect(data.segment.athletePrEffort.activityId).to.be.a('number');
                    expect(data.segment.athletePrEffort.activityId).to.be("0");
                    expect(data.segment.athletePrEffort.elapsedTime).to.be.a('number');
                    expect(data.segment.athletePrEffort.elapsedTime).to.be(0);
                    expect(data.segment.athletePrEffort.startDate).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDate).to.be(new Date());
                    expect(data.segment.athletePrEffort.startDateLocal).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDateLocal).to.be(new Date());
                    expect(data.segment.athletePrEffort.distance).to.be.a('number');
                    expect(data.segment.athletePrEffort.distance).to.be(0.0);
                    expect(data.segment.athletePrEffort.isKom).to.be.a('boolean');
                    expect(data.segment.athletePrEffort.isKom).to.be(false);
                  expect(data.segment.athleteSegmentStats).to.be.a(StravaApiV3.SummaryPRSegmentEffort);
                        expect(data.segment.athleteSegmentStats.prActivityId).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prActivityId).to.be("0");
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be(0);
                    expect(data.segment.athleteSegmentStats.prDate).to.be.a(Date);
                    expect(data.segment.athleteSegmentStats.prDate).to.be(new Date());
                    expect(data.segment.athleteSegmentStats.effortCount).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.effortCount).to.be(0);
                expect(data.komRank).to.be.a('number');
                expect(data.komRank).to.be(0);
                expect(data.prRank).to.be.a('number');
                expect(data.prRank).to.be(0);
                expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);

                      }
            }
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.embedToken).to.be.a('string');
            expect(data.embedToken).to.be("");
            {
              let dataCtr = data.splitsMetric;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Split);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.elevationDifference).to.be.a('number');
                expect(data.elevationDifference).to.be(0.0);
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);

                      }
            }
            {
              let dataCtr = data.splitsStandard;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Split);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.elevationDifference).to.be.a('number');
                expect(data.elevationDifference).to.be(0.0);
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);

                      }
            }
            {
              let dataCtr = data.laps;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Lap);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.lapIndex).to.be.a('number');
                expect(data.lapIndex).to.be(0);
                expect(data.maxSpeed).to.be.a('number');
                expect(data.maxSpeed).to.be(0.0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.totalElevationGain).to.be.a('number');
                expect(data.totalElevationGain).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.bestEfforts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.DetailedSegmentEffort);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activityId).to.be.a('number');
                expect(data.activityId).to.be("0");
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.isKom).to.be.a('boolean');
                expect(data.isKom).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageWatts).to.be.a('number');
                expect(data.averageWatts).to.be(0.0);
                expect(data.deviceWatts).to.be.a('boolean');
                expect(data.deviceWatts).to.be(false);
                expect(data.averageHeartrate).to.be.a('number');
                expect(data.averageHeartrate).to.be(0.0);
                expect(data.maxHeartrate).to.be.a('number');
                expect(data.maxHeartrate).to.be(0.0);
                expect(data.segment).to.be.a(StravaApiV3.SummarySegment);
                      expect(data.segment.id).to.be.a('number');
                  expect(data.segment.id).to.be("0");
                  expect(data.segment.name).to.be.a('string');
                  expect(data.segment.name).to.be("");
                  expect(data.segment.activityType).to.be.a('string');
                  expect(data.segment.activityType).to.be("Ride");
                  expect(data.segment.distance).to.be.a('number');
                  expect(data.segment.distance).to.be(0.0);
                  expect(data.segment.averageGrade).to.be.a('number');
                  expect(data.segment.averageGrade).to.be(0.0);
                  expect(data.segment.maximumGrade).to.be.a('number');
                  expect(data.segment.maximumGrade).to.be(0.0);
                  expect(data.segment.elevationHigh).to.be.a('number');
                  expect(data.segment.elevationHigh).to.be(0.0);
                  expect(data.segment.elevationLow).to.be.a('number');
                  expect(data.segment.elevationLow).to.be(0.0);
                  expect(data.segment.startLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.endLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.climbCategory).to.be.a('number');
                  expect(data.segment.climbCategory).to.be(0);
                  expect(data.segment.city).to.be.a('string');
                  expect(data.segment.city).to.be("");
                  expect(data.segment.state).to.be.a('string');
                  expect(data.segment.state).to.be("");
                  expect(data.segment.country).to.be.a('string');
                  expect(data.segment.country).to.be("");
                  expect(data.segment._private).to.be.a('boolean');
                  expect(data.segment._private).to.be(false);
                  expect(data.segment.athletePrEffort).to.be.a(StravaApiV3.SummarySegmentEffort);
                        expect(data.segment.athletePrEffort.id).to.be.a('number');
                    expect(data.segment.athletePrEffort.id).to.be("0");
                    expect(data.segment.athletePrEffort.activityId).to.be.a('number');
                    expect(data.segment.athletePrEffort.activityId).to.be("0");
                    expect(data.segment.athletePrEffort.elapsedTime).to.be.a('number');
                    expect(data.segment.athletePrEffort.elapsedTime).to.be(0);
                    expect(data.segment.athletePrEffort.startDate).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDate).to.be(new Date());
                    expect(data.segment.athletePrEffort.startDateLocal).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDateLocal).to.be(new Date());
                    expect(data.segment.athletePrEffort.distance).to.be.a('number');
                    expect(data.segment.athletePrEffort.distance).to.be(0.0);
                    expect(data.segment.athletePrEffort.isKom).to.be.a('boolean');
                    expect(data.segment.athletePrEffort.isKom).to.be(false);
                  expect(data.segment.athleteSegmentStats).to.be.a(StravaApiV3.SummaryPRSegmentEffort);
                        expect(data.segment.athleteSegmentStats.prActivityId).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prActivityId).to.be("0");
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be(0);
                    expect(data.segment.athleteSegmentStats.prDate).to.be.a(Date);
                    expect(data.segment.athleteSegmentStats.prDate).to.be(new Date());
                    expect(data.segment.athleteSegmentStats.effortCount).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.effortCount).to.be(0);
                expect(data.komRank).to.be.a('number');
                expect(data.komRank).to.be(0);
                expect(data.prRank).to.be.a('number');
                expect(data.prRank).to.be(0);
                expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getActivityById', function() {
        it('should call getActivityById successfully', function(done) {
          // TODO: uncomment, update parameter values for getActivityById call and complete the assertions
          /*
          var id = 789;
          var opts = {};
          opts.includeAllEfforts = true;

          instance.getActivityById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StravaApiV3.DetailedActivity);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.externalId).to.be.a('string');
            expect(data.externalId).to.be("");
            expect(data.uploadId).to.be.a('number');
            expect(data.uploadId).to.be("0");
            expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                  expect(data.athlete.id).to.be.a('number');
              expect(data.athlete.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.distance).to.be.a('number');
            expect(data.distance).to.be(0.0);
            expect(data.movingTime).to.be.a('number');
            expect(data.movingTime).to.be(0);
            expect(data.elapsedTime).to.be.a('number');
            expect(data.elapsedTime).to.be(0);
            expect(data.totalElevationGain).to.be.a('number');
            expect(data.totalElevationGain).to.be(0.0);
            expect(data.elevHigh).to.be.a('number');
            expect(data.elevHigh).to.be(0.0);
            expect(data.elevLow).to.be.a('number');
            expect(data.elevLow).to.be(0.0);
            expect(data.type).to.be.a(StravaApiV3.ActivityType);
                expect(data.startDate).to.be.a(Date);
            expect(data.startDate).to.be(new Date());
            expect(data.startDateLocal).to.be.a(Date);
            expect(data.startDateLocal).to.be(new Date());
            expect(data.timezone).to.be.a('string');
            expect(data.timezone).to.be("");
            expect(data.startLatlng).to.be.a(StravaApiV3.LatLng);
                expect(data.endLatlng).to.be.a(StravaApiV3.LatLng);
                expect(data.achievementCount).to.be.a('number');
            expect(data.achievementCount).to.be(0);
            expect(data.kudosCount).to.be.a('number');
            expect(data.kudosCount).to.be(0);
            expect(data.commentCount).to.be.a('number');
            expect(data.commentCount).to.be(0);
            expect(data.athleteCount).to.be.a('number');
            expect(data.athleteCount).to.be(0);
            expect(data.photoCount).to.be.a('number');
            expect(data.photoCount).to.be(0);
            expect(data.totalPhotoCount).to.be.a('number');
            expect(data.totalPhotoCount).to.be(0);
            expect(data.map).to.be.a(StravaApiV3.PolylineMap);
                  expect(data.map.id).to.be.a('string');
              expect(data.map.id).to.be("");
              expect(data.map.polyline).to.be.a('string');
              expect(data.map.polyline).to.be("");
              expect(data.map.summaryPolyline).to.be.a('string');
              expect(data.map.summaryPolyline).to.be("");
            expect(data.trainer).to.be.a('boolean');
            expect(data.trainer).to.be(false);
            expect(data.commute).to.be.a('boolean');
            expect(data.commute).to.be(false);
            expect(data.manual).to.be.a('boolean');
            expect(data.manual).to.be(false);
            expect(data._private).to.be.a('boolean');
            expect(data._private).to.be(false);
            expect(data.flagged).to.be.a('boolean');
            expect(data.flagged).to.be(false);
            expect(data.workoutType).to.be.a('number');
            expect(data.workoutType).to.be(0);
            expect(data.uploadIdStr).to.be.a('string');
            expect(data.uploadIdStr).to.be("");
            expect(data.averageSpeed).to.be.a('number');
            expect(data.averageSpeed).to.be(0.0);
            expect(data.maxSpeed).to.be.a('number');
            expect(data.maxSpeed).to.be(0.0);
            expect(data.hasKudoed).to.be.a('boolean');
            expect(data.hasKudoed).to.be(false);
            expect(data.hideFromHome).to.be.a('boolean');
            expect(data.hideFromHome).to.be(false);
            expect(data.gearId).to.be.a('string');
            expect(data.gearId).to.be("");
            expect(data.kilojoules).to.be.a('number');
            expect(data.kilojoules).to.be(0.0);
            expect(data.averageWatts).to.be.a('number');
            expect(data.averageWatts).to.be(0.0);
            expect(data.deviceWatts).to.be.a('boolean');
            expect(data.deviceWatts).to.be(false);
            expect(data.maxWatts).to.be.a('number');
            expect(data.maxWatts).to.be(0);
            expect(data.weightedAverageWatts).to.be.a('number');
            expect(data.weightedAverageWatts).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.photos).to.be.a(StravaApiV3.PhotosSummary);
                  expect(data.photos.count).to.be.a('number');
              expect(data.photos.count).to.be(0);
              expect(data.photos.primary).to.be.a(StravaApiV3.PhotosSummaryPrimary);
                    expect(data.photos.primary.id).to.be.a('number');
                expect(data.photos.primary.id).to.be("0");
                expect(data.photos.primary.source).to.be.a('number');
                expect(data.photos.primary.source).to.be(0);
                expect(data.photos.primary.uniqueId).to.be.a('string');
                expect(data.photos.primary.uniqueId).to.be("");
                {
                  let dataCtr = data.photos.primary.urls;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
            expect(data.gear).to.be.a(StravaApiV3.SummaryGear);
                  expect(data.gear.id).to.be.a('string');
              expect(data.gear.id).to.be("");
              expect(data.gear.resourceState).to.be.a('number');
              expect(data.gear.resourceState).to.be(0);
              expect(data.gear.primary).to.be.a('boolean');
              expect(data.gear.primary).to.be(false);
              expect(data.gear.name).to.be.a('string');
              expect(data.gear.name).to.be("");
              expect(data.gear.distance).to.be.a('number');
              expect(data.gear.distance).to.be(0.0);
            expect(data.calories).to.be.a('number');
            expect(data.calories).to.be(0.0);
            {
              let dataCtr = data.segmentEfforts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.DetailedSegmentEffort);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activityId).to.be.a('number');
                expect(data.activityId).to.be("0");
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.isKom).to.be.a('boolean');
                expect(data.isKom).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageWatts).to.be.a('number');
                expect(data.averageWatts).to.be(0.0);
                expect(data.deviceWatts).to.be.a('boolean');
                expect(data.deviceWatts).to.be(false);
                expect(data.averageHeartrate).to.be.a('number');
                expect(data.averageHeartrate).to.be(0.0);
                expect(data.maxHeartrate).to.be.a('number');
                expect(data.maxHeartrate).to.be(0.0);
                expect(data.segment).to.be.a(StravaApiV3.SummarySegment);
                      expect(data.segment.id).to.be.a('number');
                  expect(data.segment.id).to.be("0");
                  expect(data.segment.name).to.be.a('string');
                  expect(data.segment.name).to.be("");
                  expect(data.segment.activityType).to.be.a('string');
                  expect(data.segment.activityType).to.be("Ride");
                  expect(data.segment.distance).to.be.a('number');
                  expect(data.segment.distance).to.be(0.0);
                  expect(data.segment.averageGrade).to.be.a('number');
                  expect(data.segment.averageGrade).to.be(0.0);
                  expect(data.segment.maximumGrade).to.be.a('number');
                  expect(data.segment.maximumGrade).to.be(0.0);
                  expect(data.segment.elevationHigh).to.be.a('number');
                  expect(data.segment.elevationHigh).to.be(0.0);
                  expect(data.segment.elevationLow).to.be.a('number');
                  expect(data.segment.elevationLow).to.be(0.0);
                  expect(data.segment.startLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.endLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.climbCategory).to.be.a('number');
                  expect(data.segment.climbCategory).to.be(0);
                  expect(data.segment.city).to.be.a('string');
                  expect(data.segment.city).to.be("");
                  expect(data.segment.state).to.be.a('string');
                  expect(data.segment.state).to.be("");
                  expect(data.segment.country).to.be.a('string');
                  expect(data.segment.country).to.be("");
                  expect(data.segment._private).to.be.a('boolean');
                  expect(data.segment._private).to.be(false);
                  expect(data.segment.athletePrEffort).to.be.a(StravaApiV3.SummarySegmentEffort);
                        expect(data.segment.athletePrEffort.id).to.be.a('number');
                    expect(data.segment.athletePrEffort.id).to.be("0");
                    expect(data.segment.athletePrEffort.activityId).to.be.a('number');
                    expect(data.segment.athletePrEffort.activityId).to.be("0");
                    expect(data.segment.athletePrEffort.elapsedTime).to.be.a('number');
                    expect(data.segment.athletePrEffort.elapsedTime).to.be(0);
                    expect(data.segment.athletePrEffort.startDate).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDate).to.be(new Date());
                    expect(data.segment.athletePrEffort.startDateLocal).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDateLocal).to.be(new Date());
                    expect(data.segment.athletePrEffort.distance).to.be.a('number');
                    expect(data.segment.athletePrEffort.distance).to.be(0.0);
                    expect(data.segment.athletePrEffort.isKom).to.be.a('boolean');
                    expect(data.segment.athletePrEffort.isKom).to.be(false);
                  expect(data.segment.athleteSegmentStats).to.be.a(StravaApiV3.SummaryPRSegmentEffort);
                        expect(data.segment.athleteSegmentStats.prActivityId).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prActivityId).to.be("0");
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be(0);
                    expect(data.segment.athleteSegmentStats.prDate).to.be.a(Date);
                    expect(data.segment.athleteSegmentStats.prDate).to.be(new Date());
                    expect(data.segment.athleteSegmentStats.effortCount).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.effortCount).to.be(0);
                expect(data.komRank).to.be.a('number');
                expect(data.komRank).to.be(0);
                expect(data.prRank).to.be.a('number');
                expect(data.prRank).to.be(0);
                expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);

                      }
            }
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.embedToken).to.be.a('string');
            expect(data.embedToken).to.be("");
            {
              let dataCtr = data.splitsMetric;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Split);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.elevationDifference).to.be.a('number');
                expect(data.elevationDifference).to.be(0.0);
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);

                      }
            }
            {
              let dataCtr = data.splitsStandard;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Split);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.elevationDifference).to.be.a('number');
                expect(data.elevationDifference).to.be(0.0);
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);

                      }
            }
            {
              let dataCtr = data.laps;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Lap);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.lapIndex).to.be.a('number');
                expect(data.lapIndex).to.be(0);
                expect(data.maxSpeed).to.be.a('number');
                expect(data.maxSpeed).to.be(0.0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.totalElevationGain).to.be.a('number');
                expect(data.totalElevationGain).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.bestEfforts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.DetailedSegmentEffort);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activityId).to.be.a('number');
                expect(data.activityId).to.be("0");
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.isKom).to.be.a('boolean');
                expect(data.isKom).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageWatts).to.be.a('number');
                expect(data.averageWatts).to.be(0.0);
                expect(data.deviceWatts).to.be.a('boolean');
                expect(data.deviceWatts).to.be(false);
                expect(data.averageHeartrate).to.be.a('number');
                expect(data.averageHeartrate).to.be(0.0);
                expect(data.maxHeartrate).to.be.a('number');
                expect(data.maxHeartrate).to.be(0.0);
                expect(data.segment).to.be.a(StravaApiV3.SummarySegment);
                      expect(data.segment.id).to.be.a('number');
                  expect(data.segment.id).to.be("0");
                  expect(data.segment.name).to.be.a('string');
                  expect(data.segment.name).to.be("");
                  expect(data.segment.activityType).to.be.a('string');
                  expect(data.segment.activityType).to.be("Ride");
                  expect(data.segment.distance).to.be.a('number');
                  expect(data.segment.distance).to.be(0.0);
                  expect(data.segment.averageGrade).to.be.a('number');
                  expect(data.segment.averageGrade).to.be(0.0);
                  expect(data.segment.maximumGrade).to.be.a('number');
                  expect(data.segment.maximumGrade).to.be(0.0);
                  expect(data.segment.elevationHigh).to.be.a('number');
                  expect(data.segment.elevationHigh).to.be(0.0);
                  expect(data.segment.elevationLow).to.be.a('number');
                  expect(data.segment.elevationLow).to.be(0.0);
                  expect(data.segment.startLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.endLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.climbCategory).to.be.a('number');
                  expect(data.segment.climbCategory).to.be(0);
                  expect(data.segment.city).to.be.a('string');
                  expect(data.segment.city).to.be("");
                  expect(data.segment.state).to.be.a('string');
                  expect(data.segment.state).to.be("");
                  expect(data.segment.country).to.be.a('string');
                  expect(data.segment.country).to.be("");
                  expect(data.segment._private).to.be.a('boolean');
                  expect(data.segment._private).to.be(false);
                  expect(data.segment.athletePrEffort).to.be.a(StravaApiV3.SummarySegmentEffort);
                        expect(data.segment.athletePrEffort.id).to.be.a('number');
                    expect(data.segment.athletePrEffort.id).to.be("0");
                    expect(data.segment.athletePrEffort.activityId).to.be.a('number');
                    expect(data.segment.athletePrEffort.activityId).to.be("0");
                    expect(data.segment.athletePrEffort.elapsedTime).to.be.a('number');
                    expect(data.segment.athletePrEffort.elapsedTime).to.be(0);
                    expect(data.segment.athletePrEffort.startDate).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDate).to.be(new Date());
                    expect(data.segment.athletePrEffort.startDateLocal).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDateLocal).to.be(new Date());
                    expect(data.segment.athletePrEffort.distance).to.be.a('number');
                    expect(data.segment.athletePrEffort.distance).to.be(0.0);
                    expect(data.segment.athletePrEffort.isKom).to.be.a('boolean');
                    expect(data.segment.athletePrEffort.isKom).to.be(false);
                  expect(data.segment.athleteSegmentStats).to.be.a(StravaApiV3.SummaryPRSegmentEffort);
                        expect(data.segment.athleteSegmentStats.prActivityId).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prActivityId).to.be("0");
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be(0);
                    expect(data.segment.athleteSegmentStats.prDate).to.be.a(Date);
                    expect(data.segment.athleteSegmentStats.prDate).to.be(new Date());
                    expect(data.segment.athleteSegmentStats.effortCount).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.effortCount).to.be(0);
                expect(data.komRank).to.be.a('number');
                expect(data.komRank).to.be(0);
                expect(data.prRank).to.be.a('number');
                expect(data.prRank).to.be(0);
                expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCommentsByActivityId', function() {
        it('should call getCommentsByActivityId successfully', function(done) {
          // TODO: uncomment, update parameter values for getCommentsByActivityId call and complete the assertions
          /*
          var id = 789;
          var opts = {};
          opts.page = 56;
          opts.perPage = 30;

          instance.getCommentsByActivityId(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StravaApiV3.Comment);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.activityId).to.be.a('number');
              expect(data.activityId).to.be("0");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.athlete).to.be.a(StravaApiV3.SummaryAthlete);
                    expect(data.athlete.id).to.be.a('number');
                expect(data.athlete.id).to.be("0");
                expect(data.athlete.resourceState).to.be.a('number');
                expect(data.athlete.resourceState).to.be(0);
                expect(data.athlete.firstname).to.be.a('string');
                expect(data.athlete.firstname).to.be("");
                expect(data.athlete.lastname).to.be.a('string');
                expect(data.athlete.lastname).to.be("");
                expect(data.athlete.profileMedium).to.be.a('string');
                expect(data.athlete.profileMedium).to.be("");
                expect(data.athlete.profile).to.be.a('string');
                expect(data.athlete.profile).to.be("");
                expect(data.athlete.city).to.be.a('string');
                expect(data.athlete.city).to.be("");
                expect(data.athlete.state).to.be.a('string');
                expect(data.athlete.state).to.be("");
                expect(data.athlete.country).to.be.a('string');
                expect(data.athlete.country).to.be("");
                expect(data.athlete.sex).to.be.a('string');
                expect(data.athlete.sex).to.be("M");
                expect(data.athlete.premium).to.be.a('boolean');
                expect(data.athlete.premium).to.be(false);
                expect(data.athlete.summit).to.be.a('boolean');
                expect(data.athlete.summit).to.be(false);
                expect(data.athlete.createdAt).to.be.a(Date);
                expect(data.athlete.createdAt).to.be(new Date());
                expect(data.athlete.updatedAt).to.be.a(Date);
                expect(data.athlete.updatedAt).to.be(new Date());
              expect(data.createdAt).to.be.a(Date);
              expect(data.createdAt).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getKudoersByActivityId', function() {
        it('should call getKudoersByActivityId successfully', function(done) {
          // TODO: uncomment, update parameter values for getKudoersByActivityId call and complete the assertions
          /*
          var id = 789;
          var opts = {};
          opts.page = 56;
          opts.perPage = 30;

          instance.getKudoersByActivityId(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StravaApiV3.SummaryAthlete);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.resourceState).to.be.a('number');
              expect(data.resourceState).to.be(0);
              expect(data.firstname).to.be.a('string');
              expect(data.firstname).to.be("");
              expect(data.lastname).to.be.a('string');
              expect(data.lastname).to.be("");
              expect(data.profileMedium).to.be.a('string');
              expect(data.profileMedium).to.be("");
              expect(data.profile).to.be.a('string');
              expect(data.profile).to.be("");
              expect(data.city).to.be.a('string');
              expect(data.city).to.be("");
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("");
              expect(data.country).to.be.a('string');
              expect(data.country).to.be("");
              expect(data.sex).to.be.a('string');
              expect(data.sex).to.be("M");
              expect(data.premium).to.be.a('boolean');
              expect(data.premium).to.be(false);
              expect(data.summit).to.be.a('boolean');
              expect(data.summit).to.be(false);
              expect(data.createdAt).to.be.a(Date);
              expect(data.createdAt).to.be(new Date());
              expect(data.updatedAt).to.be.a(Date);
              expect(data.updatedAt).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLapsByActivityId', function() {
        it('should call getLapsByActivityId successfully', function(done) {
          // TODO: uncomment, update parameter values for getLapsByActivityId call and complete the assertions
          /*
          var id = 789;

          instance.getLapsByActivityId(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StravaApiV3.Lap);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                    expect(data.activity.id).to.be.a('number');
                expect(data.activity.id).to.be("0");
              expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                    expect(data.athlete.id).to.be.a('number');
                expect(data.athlete.id).to.be("0");
              expect(data.averageCadence).to.be.a('number');
              expect(data.averageCadence).to.be(0.0);
              expect(data.averageSpeed).to.be.a('number');
              expect(data.averageSpeed).to.be(0.0);
              expect(data.distance).to.be.a('number');
              expect(data.distance).to.be(0.0);
              expect(data.elapsedTime).to.be.a('number');
              expect(data.elapsedTime).to.be(0);
              expect(data.startIndex).to.be.a('number');
              expect(data.startIndex).to.be(0);
              expect(data.endIndex).to.be.a('number');
              expect(data.endIndex).to.be(0);
              expect(data.lapIndex).to.be.a('number');
              expect(data.lapIndex).to.be(0);
              expect(data.maxSpeed).to.be.a('number');
              expect(data.maxSpeed).to.be(0.0);
              expect(data.movingTime).to.be.a('number');
              expect(data.movingTime).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.paceZone).to.be.a('number');
              expect(data.paceZone).to.be(0);
              expect(data.split).to.be.a('number');
              expect(data.split).to.be(0);
              expect(data.startDate).to.be.a(Date);
              expect(data.startDate).to.be(new Date());
              expect(data.startDateLocal).to.be.a(Date);
              expect(data.startDateLocal).to.be(new Date());
              expect(data.totalElevationGain).to.be.a('number');
              expect(data.totalElevationGain).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLoggedInAthleteActivities', function() {
        it('should call getLoggedInAthleteActivities successfully', function(done) {
          // TODO: uncomment, update parameter values for getLoggedInAthleteActivities call and complete the assertions
          /*
          var opts = {};
          opts.before = 56;
          opts.after = 56;
          opts.page = 56;
          opts.perPage = 30;

          instance.getLoggedInAthleteActivities(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StravaApiV3.SummaryActivity);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.externalId).to.be.a('string');
              expect(data.externalId).to.be("");
              expect(data.uploadId).to.be.a('number');
              expect(data.uploadId).to.be("0");
              expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                    expect(data.athlete.id).to.be.a('number');
                expect(data.athlete.id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.distance).to.be.a('number');
              expect(data.distance).to.be(0.0);
              expect(data.movingTime).to.be.a('number');
              expect(data.movingTime).to.be(0);
              expect(data.elapsedTime).to.be.a('number');
              expect(data.elapsedTime).to.be(0);
              expect(data.totalElevationGain).to.be.a('number');
              expect(data.totalElevationGain).to.be(0.0);
              expect(data.elevHigh).to.be.a('number');
              expect(data.elevHigh).to.be(0.0);
              expect(data.elevLow).to.be.a('number');
              expect(data.elevLow).to.be(0.0);
              expect(data.type).to.be.a(StravaApiV3.ActivityType);
                  expect(data.startDate).to.be.a(Date);
              expect(data.startDate).to.be(new Date());
              expect(data.startDateLocal).to.be.a(Date);
              expect(data.startDateLocal).to.be(new Date());
              expect(data.timezone).to.be.a('string');
              expect(data.timezone).to.be("");
              expect(data.startLatlng).to.be.a(StravaApiV3.LatLng);
                  expect(data.endLatlng).to.be.a(StravaApiV3.LatLng);
                  expect(data.achievementCount).to.be.a('number');
              expect(data.achievementCount).to.be(0);
              expect(data.kudosCount).to.be.a('number');
              expect(data.kudosCount).to.be(0);
              expect(data.commentCount).to.be.a('number');
              expect(data.commentCount).to.be(0);
              expect(data.athleteCount).to.be.a('number');
              expect(data.athleteCount).to.be(0);
              expect(data.photoCount).to.be.a('number');
              expect(data.photoCount).to.be(0);
              expect(data.totalPhotoCount).to.be.a('number');
              expect(data.totalPhotoCount).to.be(0);
              expect(data.map).to.be.a(StravaApiV3.PolylineMap);
                    expect(data.map.id).to.be.a('string');
                expect(data.map.id).to.be("");
                expect(data.map.polyline).to.be.a('string');
                expect(data.map.polyline).to.be("");
                expect(data.map.summaryPolyline).to.be.a('string');
                expect(data.map.summaryPolyline).to.be("");
              expect(data.trainer).to.be.a('boolean');
              expect(data.trainer).to.be(false);
              expect(data.commute).to.be.a('boolean');
              expect(data.commute).to.be(false);
              expect(data.manual).to.be.a('boolean');
              expect(data.manual).to.be(false);
              expect(data._private).to.be.a('boolean');
              expect(data._private).to.be(false);
              expect(data.flagged).to.be.a('boolean');
              expect(data.flagged).to.be(false);
              expect(data.workoutType).to.be.a('number');
              expect(data.workoutType).to.be(0);
              expect(data.uploadIdStr).to.be.a('string');
              expect(data.uploadIdStr).to.be("");
              expect(data.averageSpeed).to.be.a('number');
              expect(data.averageSpeed).to.be(0.0);
              expect(data.maxSpeed).to.be.a('number');
              expect(data.maxSpeed).to.be(0.0);
              expect(data.hasKudoed).to.be.a('boolean');
              expect(data.hasKudoed).to.be(false);
              expect(data.hideFromHome).to.be.a('boolean');
              expect(data.hideFromHome).to.be(false);
              expect(data.gearId).to.be.a('string');
              expect(data.gearId).to.be("");
              expect(data.kilojoules).to.be.a('number');
              expect(data.kilojoules).to.be(0.0);
              expect(data.averageWatts).to.be.a('number');
              expect(data.averageWatts).to.be(0.0);
              expect(data.deviceWatts).to.be.a('boolean');
              expect(data.deviceWatts).to.be(false);
              expect(data.maxWatts).to.be.a('number');
              expect(data.maxWatts).to.be(0);
              expect(data.weightedAverageWatts).to.be.a('number');
              expect(data.weightedAverageWatts).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getZonesByActivityId', function() {
        it('should call getZonesByActivityId successfully', function(done) {
          // TODO: uncomment, update parameter values for getZonesByActivityId call and complete the assertions
          /*
          var id = 789;

          instance.getZonesByActivityId(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StravaApiV3.ActivityZone);
              expect(data.score).to.be.a('number');
              expect(data.score).to.be(0);
              expect(data.distributionBuckets).to.be.a(StravaApiV3.TimedZoneDistribution);
                  expect(data.type).to.be.a('string');
              expect(data.type).to.be("heartrate");
              expect(data.sensorBased).to.be.a('boolean');
              expect(data.sensorBased).to.be(false);
              expect(data.points).to.be.a('number');
              expect(data.points).to.be(0);
              expect(data.customZones).to.be.a('boolean');
              expect(data.customZones).to.be(false);
              expect(data.max).to.be.a('number');
              expect(data.max).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateActivityById', function() {
        it('should call updateActivityById successfully', function(done) {
          // TODO: uncomment, update parameter values for updateActivityById call and complete the assertions
          /*
          var id = 789;
          var opts = {};
          opts.body = new StravaApiV3.UpdatableActivity();
          opts.body.commute = false;
          opts.body.trainer = false;
          opts.body.hideFromHome = false;
          opts.body.description = "";
          opts.body.name = "";
          opts.body.type = new StravaApiV3.ActivityType();
          opts.body.gearId = "";

          instance.updateActivityById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StravaApiV3.DetailedActivity);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.externalId).to.be.a('string');
            expect(data.externalId).to.be("");
            expect(data.uploadId).to.be.a('number');
            expect(data.uploadId).to.be("0");
            expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                  expect(data.athlete.id).to.be.a('number');
              expect(data.athlete.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.distance).to.be.a('number');
            expect(data.distance).to.be(0.0);
            expect(data.movingTime).to.be.a('number');
            expect(data.movingTime).to.be(0);
            expect(data.elapsedTime).to.be.a('number');
            expect(data.elapsedTime).to.be(0);
            expect(data.totalElevationGain).to.be.a('number');
            expect(data.totalElevationGain).to.be(0.0);
            expect(data.elevHigh).to.be.a('number');
            expect(data.elevHigh).to.be(0.0);
            expect(data.elevLow).to.be.a('number');
            expect(data.elevLow).to.be(0.0);
            expect(data.type).to.be.a(StravaApiV3.ActivityType);
                expect(data.startDate).to.be.a(Date);
            expect(data.startDate).to.be(new Date());
            expect(data.startDateLocal).to.be.a(Date);
            expect(data.startDateLocal).to.be(new Date());
            expect(data.timezone).to.be.a('string');
            expect(data.timezone).to.be("");
            expect(data.startLatlng).to.be.a(StravaApiV3.LatLng);
                expect(data.endLatlng).to.be.a(StravaApiV3.LatLng);
                expect(data.achievementCount).to.be.a('number');
            expect(data.achievementCount).to.be(0);
            expect(data.kudosCount).to.be.a('number');
            expect(data.kudosCount).to.be(0);
            expect(data.commentCount).to.be.a('number');
            expect(data.commentCount).to.be(0);
            expect(data.athleteCount).to.be.a('number');
            expect(data.athleteCount).to.be(0);
            expect(data.photoCount).to.be.a('number');
            expect(data.photoCount).to.be(0);
            expect(data.totalPhotoCount).to.be.a('number');
            expect(data.totalPhotoCount).to.be(0);
            expect(data.map).to.be.a(StravaApiV3.PolylineMap);
                  expect(data.map.id).to.be.a('string');
              expect(data.map.id).to.be("");
              expect(data.map.polyline).to.be.a('string');
              expect(data.map.polyline).to.be("");
              expect(data.map.summaryPolyline).to.be.a('string');
              expect(data.map.summaryPolyline).to.be("");
            expect(data.trainer).to.be.a('boolean');
            expect(data.trainer).to.be(false);
            expect(data.commute).to.be.a('boolean');
            expect(data.commute).to.be(false);
            expect(data.manual).to.be.a('boolean');
            expect(data.manual).to.be(false);
            expect(data._private).to.be.a('boolean');
            expect(data._private).to.be(false);
            expect(data.flagged).to.be.a('boolean');
            expect(data.flagged).to.be(false);
            expect(data.workoutType).to.be.a('number');
            expect(data.workoutType).to.be(0);
            expect(data.uploadIdStr).to.be.a('string');
            expect(data.uploadIdStr).to.be("");
            expect(data.averageSpeed).to.be.a('number');
            expect(data.averageSpeed).to.be(0.0);
            expect(data.maxSpeed).to.be.a('number');
            expect(data.maxSpeed).to.be(0.0);
            expect(data.hasKudoed).to.be.a('boolean');
            expect(data.hasKudoed).to.be(false);
            expect(data.hideFromHome).to.be.a('boolean');
            expect(data.hideFromHome).to.be(false);
            expect(data.gearId).to.be.a('string');
            expect(data.gearId).to.be("");
            expect(data.kilojoules).to.be.a('number');
            expect(data.kilojoules).to.be(0.0);
            expect(data.averageWatts).to.be.a('number');
            expect(data.averageWatts).to.be(0.0);
            expect(data.deviceWatts).to.be.a('boolean');
            expect(data.deviceWatts).to.be(false);
            expect(data.maxWatts).to.be.a('number');
            expect(data.maxWatts).to.be(0);
            expect(data.weightedAverageWatts).to.be.a('number');
            expect(data.weightedAverageWatts).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.photos).to.be.a(StravaApiV3.PhotosSummary);
                  expect(data.photos.count).to.be.a('number');
              expect(data.photos.count).to.be(0);
              expect(data.photos.primary).to.be.a(StravaApiV3.PhotosSummaryPrimary);
                    expect(data.photos.primary.id).to.be.a('number');
                expect(data.photos.primary.id).to.be("0");
                expect(data.photos.primary.source).to.be.a('number');
                expect(data.photos.primary.source).to.be(0);
                expect(data.photos.primary.uniqueId).to.be.a('string');
                expect(data.photos.primary.uniqueId).to.be("");
                {
                  let dataCtr = data.photos.primary.urls;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
            expect(data.gear).to.be.a(StravaApiV3.SummaryGear);
                  expect(data.gear.id).to.be.a('string');
              expect(data.gear.id).to.be("");
              expect(data.gear.resourceState).to.be.a('number');
              expect(data.gear.resourceState).to.be(0);
              expect(data.gear.primary).to.be.a('boolean');
              expect(data.gear.primary).to.be(false);
              expect(data.gear.name).to.be.a('string');
              expect(data.gear.name).to.be("");
              expect(data.gear.distance).to.be.a('number');
              expect(data.gear.distance).to.be(0.0);
            expect(data.calories).to.be.a('number');
            expect(data.calories).to.be(0.0);
            {
              let dataCtr = data.segmentEfforts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.DetailedSegmentEffort);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activityId).to.be.a('number');
                expect(data.activityId).to.be("0");
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.isKom).to.be.a('boolean');
                expect(data.isKom).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageWatts).to.be.a('number');
                expect(data.averageWatts).to.be(0.0);
                expect(data.deviceWatts).to.be.a('boolean');
                expect(data.deviceWatts).to.be(false);
                expect(data.averageHeartrate).to.be.a('number');
                expect(data.averageHeartrate).to.be(0.0);
                expect(data.maxHeartrate).to.be.a('number');
                expect(data.maxHeartrate).to.be(0.0);
                expect(data.segment).to.be.a(StravaApiV3.SummarySegment);
                      expect(data.segment.id).to.be.a('number');
                  expect(data.segment.id).to.be("0");
                  expect(data.segment.name).to.be.a('string');
                  expect(data.segment.name).to.be("");
                  expect(data.segment.activityType).to.be.a('string');
                  expect(data.segment.activityType).to.be("Ride");
                  expect(data.segment.distance).to.be.a('number');
                  expect(data.segment.distance).to.be(0.0);
                  expect(data.segment.averageGrade).to.be.a('number');
                  expect(data.segment.averageGrade).to.be(0.0);
                  expect(data.segment.maximumGrade).to.be.a('number');
                  expect(data.segment.maximumGrade).to.be(0.0);
                  expect(data.segment.elevationHigh).to.be.a('number');
                  expect(data.segment.elevationHigh).to.be(0.0);
                  expect(data.segment.elevationLow).to.be.a('number');
                  expect(data.segment.elevationLow).to.be(0.0);
                  expect(data.segment.startLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.endLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.climbCategory).to.be.a('number');
                  expect(data.segment.climbCategory).to.be(0);
                  expect(data.segment.city).to.be.a('string');
                  expect(data.segment.city).to.be("");
                  expect(data.segment.state).to.be.a('string');
                  expect(data.segment.state).to.be("");
                  expect(data.segment.country).to.be.a('string');
                  expect(data.segment.country).to.be("");
                  expect(data.segment._private).to.be.a('boolean');
                  expect(data.segment._private).to.be(false);
                  expect(data.segment.athletePrEffort).to.be.a(StravaApiV3.SummarySegmentEffort);
                        expect(data.segment.athletePrEffort.id).to.be.a('number');
                    expect(data.segment.athletePrEffort.id).to.be("0");
                    expect(data.segment.athletePrEffort.activityId).to.be.a('number');
                    expect(data.segment.athletePrEffort.activityId).to.be("0");
                    expect(data.segment.athletePrEffort.elapsedTime).to.be.a('number');
                    expect(data.segment.athletePrEffort.elapsedTime).to.be(0);
                    expect(data.segment.athletePrEffort.startDate).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDate).to.be(new Date());
                    expect(data.segment.athletePrEffort.startDateLocal).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDateLocal).to.be(new Date());
                    expect(data.segment.athletePrEffort.distance).to.be.a('number');
                    expect(data.segment.athletePrEffort.distance).to.be(0.0);
                    expect(data.segment.athletePrEffort.isKom).to.be.a('boolean');
                    expect(data.segment.athletePrEffort.isKom).to.be(false);
                  expect(data.segment.athleteSegmentStats).to.be.a(StravaApiV3.SummaryPRSegmentEffort);
                        expect(data.segment.athleteSegmentStats.prActivityId).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prActivityId).to.be("0");
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be(0);
                    expect(data.segment.athleteSegmentStats.prDate).to.be.a(Date);
                    expect(data.segment.athleteSegmentStats.prDate).to.be(new Date());
                    expect(data.segment.athleteSegmentStats.effortCount).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.effortCount).to.be(0);
                expect(data.komRank).to.be.a('number');
                expect(data.komRank).to.be(0);
                expect(data.prRank).to.be.a('number');
                expect(data.prRank).to.be(0);
                expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);

                      }
            }
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.embedToken).to.be.a('string');
            expect(data.embedToken).to.be("");
            {
              let dataCtr = data.splitsMetric;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Split);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.elevationDifference).to.be.a('number');
                expect(data.elevationDifference).to.be(0.0);
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);

                      }
            }
            {
              let dataCtr = data.splitsStandard;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Split);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.elevationDifference).to.be.a('number');
                expect(data.elevationDifference).to.be(0.0);
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);

                      }
            }
            {
              let dataCtr = data.laps;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.Lap);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageSpeed).to.be.a('number');
                expect(data.averageSpeed).to.be(0.0);
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.lapIndex).to.be.a('number');
                expect(data.lapIndex).to.be(0);
                expect(data.maxSpeed).to.be.a('number');
                expect(data.maxSpeed).to.be(0.0);
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.paceZone).to.be.a('number');
                expect(data.paceZone).to.be(0);
                expect(data.split).to.be.a('number');
                expect(data.split).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.totalElevationGain).to.be.a('number');
                expect(data.totalElevationGain).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.bestEfforts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StravaApiV3.DetailedSegmentEffort);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.activityId).to.be.a('number');
                expect(data.activityId).to.be("0");
                expect(data.elapsedTime).to.be.a('number');
                expect(data.elapsedTime).to.be(0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.startDateLocal).to.be.a(Date);
                expect(data.startDateLocal).to.be(new Date());
                expect(data.distance).to.be.a('number');
                expect(data.distance).to.be(0.0);
                expect(data.isKom).to.be.a('boolean');
                expect(data.isKom).to.be(false);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.activity).to.be.a(StravaApiV3.MetaActivity);
                      expect(data.activity.id).to.be.a('number');
                  expect(data.activity.id).to.be("0");
                expect(data.athlete).to.be.a(StravaApiV3.MetaAthlete);
                      expect(data.athlete.id).to.be.a('number');
                  expect(data.athlete.id).to.be("0");
                expect(data.movingTime).to.be.a('number');
                expect(data.movingTime).to.be(0);
                expect(data.startIndex).to.be.a('number');
                expect(data.startIndex).to.be(0);
                expect(data.endIndex).to.be.a('number');
                expect(data.endIndex).to.be(0);
                expect(data.averageCadence).to.be.a('number');
                expect(data.averageCadence).to.be(0.0);
                expect(data.averageWatts).to.be.a('number');
                expect(data.averageWatts).to.be(0.0);
                expect(data.deviceWatts).to.be.a('boolean');
                expect(data.deviceWatts).to.be(false);
                expect(data.averageHeartrate).to.be.a('number');
                expect(data.averageHeartrate).to.be(0.0);
                expect(data.maxHeartrate).to.be.a('number');
                expect(data.maxHeartrate).to.be(0.0);
                expect(data.segment).to.be.a(StravaApiV3.SummarySegment);
                      expect(data.segment.id).to.be.a('number');
                  expect(data.segment.id).to.be("0");
                  expect(data.segment.name).to.be.a('string');
                  expect(data.segment.name).to.be("");
                  expect(data.segment.activityType).to.be.a('string');
                  expect(data.segment.activityType).to.be("Ride");
                  expect(data.segment.distance).to.be.a('number');
                  expect(data.segment.distance).to.be(0.0);
                  expect(data.segment.averageGrade).to.be.a('number');
                  expect(data.segment.averageGrade).to.be(0.0);
                  expect(data.segment.maximumGrade).to.be.a('number');
                  expect(data.segment.maximumGrade).to.be(0.0);
                  expect(data.segment.elevationHigh).to.be.a('number');
                  expect(data.segment.elevationHigh).to.be(0.0);
                  expect(data.segment.elevationLow).to.be.a('number');
                  expect(data.segment.elevationLow).to.be(0.0);
                  expect(data.segment.startLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.endLatlng).to.be.a(StravaApiV3.LatLng);
                      expect(data.segment.climbCategory).to.be.a('number');
                  expect(data.segment.climbCategory).to.be(0);
                  expect(data.segment.city).to.be.a('string');
                  expect(data.segment.city).to.be("");
                  expect(data.segment.state).to.be.a('string');
                  expect(data.segment.state).to.be("");
                  expect(data.segment.country).to.be.a('string');
                  expect(data.segment.country).to.be("");
                  expect(data.segment._private).to.be.a('boolean');
                  expect(data.segment._private).to.be(false);
                  expect(data.segment.athletePrEffort).to.be.a(StravaApiV3.SummarySegmentEffort);
                        expect(data.segment.athletePrEffort.id).to.be.a('number');
                    expect(data.segment.athletePrEffort.id).to.be("0");
                    expect(data.segment.athletePrEffort.activityId).to.be.a('number');
                    expect(data.segment.athletePrEffort.activityId).to.be("0");
                    expect(data.segment.athletePrEffort.elapsedTime).to.be.a('number');
                    expect(data.segment.athletePrEffort.elapsedTime).to.be(0);
                    expect(data.segment.athletePrEffort.startDate).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDate).to.be(new Date());
                    expect(data.segment.athletePrEffort.startDateLocal).to.be.a(Date);
                    expect(data.segment.athletePrEffort.startDateLocal).to.be(new Date());
                    expect(data.segment.athletePrEffort.distance).to.be.a('number');
                    expect(data.segment.athletePrEffort.distance).to.be(0.0);
                    expect(data.segment.athletePrEffort.isKom).to.be.a('boolean');
                    expect(data.segment.athletePrEffort.isKom).to.be(false);
                  expect(data.segment.athleteSegmentStats).to.be.a(StravaApiV3.SummaryPRSegmentEffort);
                        expect(data.segment.athleteSegmentStats.prActivityId).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prActivityId).to.be("0");
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.prElapsedTime).to.be(0);
                    expect(data.segment.athleteSegmentStats.prDate).to.be.a(Date);
                    expect(data.segment.athleteSegmentStats.prDate).to.be(new Date());
                    expect(data.segment.athleteSegmentStats.effortCount).to.be.a('number');
                    expect(data.segment.athleteSegmentStats.effortCount).to.be(0);
                expect(data.komRank).to.be.a('number');
                expect(data.komRank).to.be(0);
                expect(data.prRank).to.be.a('number');
                expect(data.prRank).to.be(0);
                expect(data.hidden).to.be.a('boolean');
                expect(data.hidden).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
