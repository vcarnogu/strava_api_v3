/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StravaApiV3);
  }
}(this, function(expect, StravaApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StravaApiV3.StreamsApi();
  });

  describe('(package)', function() {
    describe('StreamsApi', function() {
      describe('getActivityStreams', function() {
        it('should call getActivityStreams successfully', function(done) {
          // TODO: uncomment, update parameter values for getActivityStreams call and complete the assertions
          /*
          var id = 789;
          var keys = ["keys_example"];
          var keyByType = true;

          instance.getActivityStreams(id, keys, keyByType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StravaApiV3.StreamSet);
            expect(data.time).to.be.a(StravaApiV3.TimeStream);
                  expect(data.time.originalSize).to.be.a('number');
              expect(data.time.originalSize).to.be(0);
              expect(data.time.resolution).to.be.a('string');
              expect(data.time.resolution).to.be("low");
              expect(data.time.seriesType).to.be.a('string');
              expect(data.time.seriesType).to.be("distance");
              {
                let dataCtr = data.time.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.distance).to.be.a(StravaApiV3.DistanceStream);
                  expect(data.distance.originalSize).to.be.a('number');
              expect(data.distance.originalSize).to.be(0);
              expect(data.distance.resolution).to.be.a('string');
              expect(data.distance.resolution).to.be("low");
              expect(data.distance.seriesType).to.be.a('string');
              expect(data.distance.seriesType).to.be("distance");
              {
                let dataCtr = data.distance.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.latlng).to.be.a(StravaApiV3.LatLngStream);
                  expect(data.latlng.originalSize).to.be.a('number');
              expect(data.latlng.originalSize).to.be(0);
              expect(data.latlng.resolution).to.be.a('string');
              expect(data.latlng.resolution).to.be("low");
              expect(data.latlng.seriesType).to.be.a('string');
              expect(data.latlng.seriesType).to.be("distance");
              {
                let dataCtr = data.latlng.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(StravaApiV3.LatLng);
  
                        }
              }
            expect(data.altitude).to.be.a(StravaApiV3.AltitudeStream);
                  expect(data.altitude.originalSize).to.be.a('number');
              expect(data.altitude.originalSize).to.be(0);
              expect(data.altitude.resolution).to.be.a('string');
              expect(data.altitude.resolution).to.be("low");
              expect(data.altitude.seriesType).to.be.a('string');
              expect(data.altitude.seriesType).to.be("distance");
              {
                let dataCtr = data.altitude.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.velocitySmooth).to.be.a(StravaApiV3.SmoothVelocityStream);
                  expect(data.velocitySmooth.originalSize).to.be.a('number');
              expect(data.velocitySmooth.originalSize).to.be(0);
              expect(data.velocitySmooth.resolution).to.be.a('string');
              expect(data.velocitySmooth.resolution).to.be("low");
              expect(data.velocitySmooth.seriesType).to.be.a('string');
              expect(data.velocitySmooth.seriesType).to.be("distance");
              {
                let dataCtr = data.velocitySmooth.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.heartrate).to.be.a(StravaApiV3.HeartrateStream);
                  expect(data.heartrate.originalSize).to.be.a('number');
              expect(data.heartrate.originalSize).to.be(0);
              expect(data.heartrate.resolution).to.be.a('string');
              expect(data.heartrate.resolution).to.be("low");
              expect(data.heartrate.seriesType).to.be.a('string');
              expect(data.heartrate.seriesType).to.be("distance");
              {
                let dataCtr = data.heartrate.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.cadence).to.be.a(StravaApiV3.CadenceStream);
                  expect(data.cadence.originalSize).to.be.a('number');
              expect(data.cadence.originalSize).to.be(0);
              expect(data.cadence.resolution).to.be.a('string');
              expect(data.cadence.resolution).to.be("low");
              expect(data.cadence.seriesType).to.be.a('string');
              expect(data.cadence.seriesType).to.be("distance");
              {
                let dataCtr = data.cadence.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.watts).to.be.a(StravaApiV3.PowerStream);
                  expect(data.watts.originalSize).to.be.a('number');
              expect(data.watts.originalSize).to.be(0);
              expect(data.watts.resolution).to.be.a('string');
              expect(data.watts.resolution).to.be("low");
              expect(data.watts.seriesType).to.be.a('string');
              expect(data.watts.seriesType).to.be("distance");
              {
                let dataCtr = data.watts.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.temp).to.be.a(StravaApiV3.TemperatureStream);
                  expect(data.temp.originalSize).to.be.a('number');
              expect(data.temp.originalSize).to.be(0);
              expect(data.temp.resolution).to.be.a('string');
              expect(data.temp.resolution).to.be("low");
              expect(data.temp.seriesType).to.be.a('string');
              expect(data.temp.seriesType).to.be("distance");
              {
                let dataCtr = data.temp.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.moving).to.be.a(StravaApiV3.MovingStream);
                  expect(data.moving.originalSize).to.be.a('number');
              expect(data.moving.originalSize).to.be(0);
              expect(data.moving.resolution).to.be.a('string');
              expect(data.moving.resolution).to.be("low");
              expect(data.moving.seriesType).to.be.a('string');
              expect(data.moving.seriesType).to.be("distance");
              {
                let dataCtr = data.moving.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('boolean');
                  expect(data).to.be(false);
                }
              }
            expect(data.gradeSmooth).to.be.a(StravaApiV3.SmoothGradeStream);
                  expect(data.gradeSmooth.originalSize).to.be.a('number');
              expect(data.gradeSmooth.originalSize).to.be(0);
              expect(data.gradeSmooth.resolution).to.be.a('string');
              expect(data.gradeSmooth.resolution).to.be("low");
              expect(data.gradeSmooth.seriesType).to.be.a('string');
              expect(data.gradeSmooth.seriesType).to.be("distance");
              {
                let dataCtr = data.gradeSmooth.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRouteStreams', function() {
        it('should call getRouteStreams successfully', function(done) {
          // TODO: uncomment, update parameter values for getRouteStreams call and complete the assertions
          /*
          var id = 789;

          instance.getRouteStreams(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StravaApiV3.StreamSet);
            expect(data.time).to.be.a(StravaApiV3.TimeStream);
                  expect(data.time.originalSize).to.be.a('number');
              expect(data.time.originalSize).to.be(0);
              expect(data.time.resolution).to.be.a('string');
              expect(data.time.resolution).to.be("low");
              expect(data.time.seriesType).to.be.a('string');
              expect(data.time.seriesType).to.be("distance");
              {
                let dataCtr = data.time.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.distance).to.be.a(StravaApiV3.DistanceStream);
                  expect(data.distance.originalSize).to.be.a('number');
              expect(data.distance.originalSize).to.be(0);
              expect(data.distance.resolution).to.be.a('string');
              expect(data.distance.resolution).to.be("low");
              expect(data.distance.seriesType).to.be.a('string');
              expect(data.distance.seriesType).to.be("distance");
              {
                let dataCtr = data.distance.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.latlng).to.be.a(StravaApiV3.LatLngStream);
                  expect(data.latlng.originalSize).to.be.a('number');
              expect(data.latlng.originalSize).to.be(0);
              expect(data.latlng.resolution).to.be.a('string');
              expect(data.latlng.resolution).to.be("low");
              expect(data.latlng.seriesType).to.be.a('string');
              expect(data.latlng.seriesType).to.be("distance");
              {
                let dataCtr = data.latlng.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(StravaApiV3.LatLng);
  
                        }
              }
            expect(data.altitude).to.be.a(StravaApiV3.AltitudeStream);
                  expect(data.altitude.originalSize).to.be.a('number');
              expect(data.altitude.originalSize).to.be(0);
              expect(data.altitude.resolution).to.be.a('string');
              expect(data.altitude.resolution).to.be("low");
              expect(data.altitude.seriesType).to.be.a('string');
              expect(data.altitude.seriesType).to.be("distance");
              {
                let dataCtr = data.altitude.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.velocitySmooth).to.be.a(StravaApiV3.SmoothVelocityStream);
                  expect(data.velocitySmooth.originalSize).to.be.a('number');
              expect(data.velocitySmooth.originalSize).to.be(0);
              expect(data.velocitySmooth.resolution).to.be.a('string');
              expect(data.velocitySmooth.resolution).to.be("low");
              expect(data.velocitySmooth.seriesType).to.be.a('string');
              expect(data.velocitySmooth.seriesType).to.be("distance");
              {
                let dataCtr = data.velocitySmooth.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.heartrate).to.be.a(StravaApiV3.HeartrateStream);
                  expect(data.heartrate.originalSize).to.be.a('number');
              expect(data.heartrate.originalSize).to.be(0);
              expect(data.heartrate.resolution).to.be.a('string');
              expect(data.heartrate.resolution).to.be("low");
              expect(data.heartrate.seriesType).to.be.a('string');
              expect(data.heartrate.seriesType).to.be("distance");
              {
                let dataCtr = data.heartrate.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.cadence).to.be.a(StravaApiV3.CadenceStream);
                  expect(data.cadence.originalSize).to.be.a('number');
              expect(data.cadence.originalSize).to.be(0);
              expect(data.cadence.resolution).to.be.a('string');
              expect(data.cadence.resolution).to.be("low");
              expect(data.cadence.seriesType).to.be.a('string');
              expect(data.cadence.seriesType).to.be("distance");
              {
                let dataCtr = data.cadence.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.watts).to.be.a(StravaApiV3.PowerStream);
                  expect(data.watts.originalSize).to.be.a('number');
              expect(data.watts.originalSize).to.be(0);
              expect(data.watts.resolution).to.be.a('string');
              expect(data.watts.resolution).to.be("low");
              expect(data.watts.seriesType).to.be.a('string');
              expect(data.watts.seriesType).to.be("distance");
              {
                let dataCtr = data.watts.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.temp).to.be.a(StravaApiV3.TemperatureStream);
                  expect(data.temp.originalSize).to.be.a('number');
              expect(data.temp.originalSize).to.be(0);
              expect(data.temp.resolution).to.be.a('string');
              expect(data.temp.resolution).to.be("low");
              expect(data.temp.seriesType).to.be.a('string');
              expect(data.temp.seriesType).to.be("distance");
              {
                let dataCtr = data.temp.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.moving).to.be.a(StravaApiV3.MovingStream);
                  expect(data.moving.originalSize).to.be.a('number');
              expect(data.moving.originalSize).to.be(0);
              expect(data.moving.resolution).to.be.a('string');
              expect(data.moving.resolution).to.be("low");
              expect(data.moving.seriesType).to.be.a('string');
              expect(data.moving.seriesType).to.be("distance");
              {
                let dataCtr = data.moving.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('boolean');
                  expect(data).to.be(false);
                }
              }
            expect(data.gradeSmooth).to.be.a(StravaApiV3.SmoothGradeStream);
                  expect(data.gradeSmooth.originalSize).to.be.a('number');
              expect(data.gradeSmooth.originalSize).to.be(0);
              expect(data.gradeSmooth.resolution).to.be.a('string');
              expect(data.gradeSmooth.resolution).to.be("low");
              expect(data.gradeSmooth.seriesType).to.be.a('string');
              expect(data.gradeSmooth.seriesType).to.be("distance");
              {
                let dataCtr = data.gradeSmooth.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSegmentEffortStreams', function() {
        it('should call getSegmentEffortStreams successfully', function(done) {
          // TODO: uncomment, update parameter values for getSegmentEffortStreams call and complete the assertions
          /*
          var id = 789;
          var keys = ["keys_example"];
          var keyByType = true;

          instance.getSegmentEffortStreams(id, keys, keyByType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StravaApiV3.StreamSet);
            expect(data.time).to.be.a(StravaApiV3.TimeStream);
                  expect(data.time.originalSize).to.be.a('number');
              expect(data.time.originalSize).to.be(0);
              expect(data.time.resolution).to.be.a('string');
              expect(data.time.resolution).to.be("low");
              expect(data.time.seriesType).to.be.a('string');
              expect(data.time.seriesType).to.be("distance");
              {
                let dataCtr = data.time.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.distance).to.be.a(StravaApiV3.DistanceStream);
                  expect(data.distance.originalSize).to.be.a('number');
              expect(data.distance.originalSize).to.be(0);
              expect(data.distance.resolution).to.be.a('string');
              expect(data.distance.resolution).to.be("low");
              expect(data.distance.seriesType).to.be.a('string');
              expect(data.distance.seriesType).to.be("distance");
              {
                let dataCtr = data.distance.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.latlng).to.be.a(StravaApiV3.LatLngStream);
                  expect(data.latlng.originalSize).to.be.a('number');
              expect(data.latlng.originalSize).to.be(0);
              expect(data.latlng.resolution).to.be.a('string');
              expect(data.latlng.resolution).to.be("low");
              expect(data.latlng.seriesType).to.be.a('string');
              expect(data.latlng.seriesType).to.be("distance");
              {
                let dataCtr = data.latlng.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(StravaApiV3.LatLng);
  
                        }
              }
            expect(data.altitude).to.be.a(StravaApiV3.AltitudeStream);
                  expect(data.altitude.originalSize).to.be.a('number');
              expect(data.altitude.originalSize).to.be(0);
              expect(data.altitude.resolution).to.be.a('string');
              expect(data.altitude.resolution).to.be("low");
              expect(data.altitude.seriesType).to.be.a('string');
              expect(data.altitude.seriesType).to.be("distance");
              {
                let dataCtr = data.altitude.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.velocitySmooth).to.be.a(StravaApiV3.SmoothVelocityStream);
                  expect(data.velocitySmooth.originalSize).to.be.a('number');
              expect(data.velocitySmooth.originalSize).to.be(0);
              expect(data.velocitySmooth.resolution).to.be.a('string');
              expect(data.velocitySmooth.resolution).to.be("low");
              expect(data.velocitySmooth.seriesType).to.be.a('string');
              expect(data.velocitySmooth.seriesType).to.be("distance");
              {
                let dataCtr = data.velocitySmooth.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.heartrate).to.be.a(StravaApiV3.HeartrateStream);
                  expect(data.heartrate.originalSize).to.be.a('number');
              expect(data.heartrate.originalSize).to.be(0);
              expect(data.heartrate.resolution).to.be.a('string');
              expect(data.heartrate.resolution).to.be("low");
              expect(data.heartrate.seriesType).to.be.a('string');
              expect(data.heartrate.seriesType).to.be("distance");
              {
                let dataCtr = data.heartrate.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.cadence).to.be.a(StravaApiV3.CadenceStream);
                  expect(data.cadence.originalSize).to.be.a('number');
              expect(data.cadence.originalSize).to.be(0);
              expect(data.cadence.resolution).to.be.a('string');
              expect(data.cadence.resolution).to.be("low");
              expect(data.cadence.seriesType).to.be.a('string');
              expect(data.cadence.seriesType).to.be("distance");
              {
                let dataCtr = data.cadence.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.watts).to.be.a(StravaApiV3.PowerStream);
                  expect(data.watts.originalSize).to.be.a('number');
              expect(data.watts.originalSize).to.be(0);
              expect(data.watts.resolution).to.be.a('string');
              expect(data.watts.resolution).to.be("low");
              expect(data.watts.seriesType).to.be.a('string');
              expect(data.watts.seriesType).to.be("distance");
              {
                let dataCtr = data.watts.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.temp).to.be.a(StravaApiV3.TemperatureStream);
                  expect(data.temp.originalSize).to.be.a('number');
              expect(data.temp.originalSize).to.be(0);
              expect(data.temp.resolution).to.be.a('string');
              expect(data.temp.resolution).to.be("low");
              expect(data.temp.seriesType).to.be.a('string');
              expect(data.temp.seriesType).to.be("distance");
              {
                let dataCtr = data.temp.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.moving).to.be.a(StravaApiV3.MovingStream);
                  expect(data.moving.originalSize).to.be.a('number');
              expect(data.moving.originalSize).to.be(0);
              expect(data.moving.resolution).to.be.a('string');
              expect(data.moving.resolution).to.be("low");
              expect(data.moving.seriesType).to.be.a('string');
              expect(data.moving.seriesType).to.be("distance");
              {
                let dataCtr = data.moving.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('boolean');
                  expect(data).to.be(false);
                }
              }
            expect(data.gradeSmooth).to.be.a(StravaApiV3.SmoothGradeStream);
                  expect(data.gradeSmooth.originalSize).to.be.a('number');
              expect(data.gradeSmooth.originalSize).to.be(0);
              expect(data.gradeSmooth.resolution).to.be.a('string');
              expect(data.gradeSmooth.resolution).to.be("low");
              expect(data.gradeSmooth.seriesType).to.be.a('string');
              expect(data.gradeSmooth.seriesType).to.be("distance");
              {
                let dataCtr = data.gradeSmooth.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSegmentStreams', function() {
        it('should call getSegmentStreams successfully', function(done) {
          // TODO: uncomment, update parameter values for getSegmentStreams call and complete the assertions
          /*
          var id = 789;
          var keys = ["keys_example"];
          var keyByType = true;

          instance.getSegmentStreams(id, keys, keyByType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StravaApiV3.StreamSet);
            expect(data.time).to.be.a(StravaApiV3.TimeStream);
                  expect(data.time.originalSize).to.be.a('number');
              expect(data.time.originalSize).to.be(0);
              expect(data.time.resolution).to.be.a('string');
              expect(data.time.resolution).to.be("low");
              expect(data.time.seriesType).to.be.a('string');
              expect(data.time.seriesType).to.be("distance");
              {
                let dataCtr = data.time.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.distance).to.be.a(StravaApiV3.DistanceStream);
                  expect(data.distance.originalSize).to.be.a('number');
              expect(data.distance.originalSize).to.be(0);
              expect(data.distance.resolution).to.be.a('string');
              expect(data.distance.resolution).to.be("low");
              expect(data.distance.seriesType).to.be.a('string');
              expect(data.distance.seriesType).to.be("distance");
              {
                let dataCtr = data.distance.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.latlng).to.be.a(StravaApiV3.LatLngStream);
                  expect(data.latlng.originalSize).to.be.a('number');
              expect(data.latlng.originalSize).to.be(0);
              expect(data.latlng.resolution).to.be.a('string');
              expect(data.latlng.resolution).to.be("low");
              expect(data.latlng.seriesType).to.be.a('string');
              expect(data.latlng.seriesType).to.be("distance");
              {
                let dataCtr = data.latlng.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(StravaApiV3.LatLng);
  
                        }
              }
            expect(data.altitude).to.be.a(StravaApiV3.AltitudeStream);
                  expect(data.altitude.originalSize).to.be.a('number');
              expect(data.altitude.originalSize).to.be(0);
              expect(data.altitude.resolution).to.be.a('string');
              expect(data.altitude.resolution).to.be("low");
              expect(data.altitude.seriesType).to.be.a('string');
              expect(data.altitude.seriesType).to.be("distance");
              {
                let dataCtr = data.altitude.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.velocitySmooth).to.be.a(StravaApiV3.SmoothVelocityStream);
                  expect(data.velocitySmooth.originalSize).to.be.a('number');
              expect(data.velocitySmooth.originalSize).to.be(0);
              expect(data.velocitySmooth.resolution).to.be.a('string');
              expect(data.velocitySmooth.resolution).to.be("low");
              expect(data.velocitySmooth.seriesType).to.be.a('string');
              expect(data.velocitySmooth.seriesType).to.be("distance");
              {
                let dataCtr = data.velocitySmooth.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }
            expect(data.heartrate).to.be.a(StravaApiV3.HeartrateStream);
                  expect(data.heartrate.originalSize).to.be.a('number');
              expect(data.heartrate.originalSize).to.be(0);
              expect(data.heartrate.resolution).to.be.a('string');
              expect(data.heartrate.resolution).to.be("low");
              expect(data.heartrate.seriesType).to.be.a('string');
              expect(data.heartrate.seriesType).to.be("distance");
              {
                let dataCtr = data.heartrate.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.cadence).to.be.a(StravaApiV3.CadenceStream);
                  expect(data.cadence.originalSize).to.be.a('number');
              expect(data.cadence.originalSize).to.be(0);
              expect(data.cadence.resolution).to.be.a('string');
              expect(data.cadence.resolution).to.be("low");
              expect(data.cadence.seriesType).to.be.a('string');
              expect(data.cadence.seriesType).to.be("distance");
              {
                let dataCtr = data.cadence.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.watts).to.be.a(StravaApiV3.PowerStream);
                  expect(data.watts.originalSize).to.be.a('number');
              expect(data.watts.originalSize).to.be(0);
              expect(data.watts.resolution).to.be.a('string');
              expect(data.watts.resolution).to.be("low");
              expect(data.watts.seriesType).to.be.a('string');
              expect(data.watts.seriesType).to.be("distance");
              {
                let dataCtr = data.watts.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.temp).to.be.a(StravaApiV3.TemperatureStream);
                  expect(data.temp.originalSize).to.be.a('number');
              expect(data.temp.originalSize).to.be(0);
              expect(data.temp.resolution).to.be.a('string');
              expect(data.temp.resolution).to.be("low");
              expect(data.temp.seriesType).to.be.a('string');
              expect(data.temp.seriesType).to.be("distance");
              {
                let dataCtr = data.temp.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            expect(data.moving).to.be.a(StravaApiV3.MovingStream);
                  expect(data.moving.originalSize).to.be.a('number');
              expect(data.moving.originalSize).to.be(0);
              expect(data.moving.resolution).to.be.a('string');
              expect(data.moving.resolution).to.be("low");
              expect(data.moving.seriesType).to.be.a('string');
              expect(data.moving.seriesType).to.be("distance");
              {
                let dataCtr = data.moving.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('boolean');
                  expect(data).to.be(false);
                }
              }
            expect(data.gradeSmooth).to.be.a(StravaApiV3.SmoothGradeStream);
                  expect(data.gradeSmooth.originalSize).to.be.a('number');
              expect(data.gradeSmooth.originalSize).to.be(0);
              expect(data.gradeSmooth.resolution).to.be.a('string');
              expect(data.gradeSmooth.resolution).to.be("low");
              expect(data.gradeSmooth.seriesType).to.be.a('string');
              expect(data.gradeSmooth.seriesType).to.be("distance");
              {
                let dataCtr = data.gradeSmooth.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0.0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
