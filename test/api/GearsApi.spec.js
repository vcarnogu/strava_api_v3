/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StravaApiV3);
  }
}(this, function(expect, StravaApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StravaApiV3.GearsApi();
  });

  describe('(package)', function() {
    describe('GearsApi', function() {
      describe('getGearById', function() {
        it('should call getGearById successfully', function(done) {
          // TODO: uncomment, update parameter values for getGearById call and complete the assertions
          /*
          var id = "id_example";

          instance.getGearById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StravaApiV3.DetailedGear);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.resourceState).to.be.a('number');
            expect(data.resourceState).to.be(0);
            expect(data.primary).to.be.a('boolean');
            expect(data.primary).to.be(false);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.distance).to.be.a('number');
            expect(data.distance).to.be(0.0);
            expect(data.brandName).to.be.a('string');
            expect(data.brandName).to.be("");
            expect(data.modelName).to.be.a('string');
            expect(data.modelName).to.be("");
            expect(data.frameType).to.be.a('number');
            expect(data.frameType).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
