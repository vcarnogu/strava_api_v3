/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StravaApiV3);
  }
}(this, function(expect, StravaApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DetailedSegmentEffort', function() {
      beforeEach(function() {
        instance = new StravaApiV3.DetailedSegmentEffort();
      });

      it('should create an instance of DetailedSegmentEffort', function() {
        // TODO: update the code to test DetailedSegmentEffort
        expect(instance).to.be.a(StravaApiV3.DetailedSegmentEffort);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property activity (base name: "activity")', function() {
        // TODO: update the code to test the property activity
        expect(instance).to.have.property('activity');
        // expect(instance.activity).to.be(expectedValueLiteral);
      });

      it('should have the property athlete (base name: "athlete")', function() {
        // TODO: update the code to test the property athlete
        expect(instance).to.have.property('athlete');
        // expect(instance.athlete).to.be(expectedValueLiteral);
      });

      it('should have the property movingTime (base name: "moving_time")', function() {
        // TODO: update the code to test the property movingTime
        expect(instance).to.have.property('movingTime');
        // expect(instance.movingTime).to.be(expectedValueLiteral);
      });

      it('should have the property startIndex (base name: "start_index")', function() {
        // TODO: update the code to test the property startIndex
        expect(instance).to.have.property('startIndex');
        // expect(instance.startIndex).to.be(expectedValueLiteral);
      });

      it('should have the property endIndex (base name: "end_index")', function() {
        // TODO: update the code to test the property endIndex
        expect(instance).to.have.property('endIndex');
        // expect(instance.endIndex).to.be(expectedValueLiteral);
      });

      it('should have the property averageCadence (base name: "average_cadence")', function() {
        // TODO: update the code to test the property averageCadence
        expect(instance).to.have.property('averageCadence');
        // expect(instance.averageCadence).to.be(expectedValueLiteral);
      });

      it('should have the property averageWatts (base name: "average_watts")', function() {
        // TODO: update the code to test the property averageWatts
        expect(instance).to.have.property('averageWatts');
        // expect(instance.averageWatts).to.be(expectedValueLiteral);
      });

      it('should have the property deviceWatts (base name: "device_watts")', function() {
        // TODO: update the code to test the property deviceWatts
        expect(instance).to.have.property('deviceWatts');
        // expect(instance.deviceWatts).to.be(expectedValueLiteral);
      });

      it('should have the property averageHeartrate (base name: "average_heartrate")', function() {
        // TODO: update the code to test the property averageHeartrate
        expect(instance).to.have.property('averageHeartrate');
        // expect(instance.averageHeartrate).to.be(expectedValueLiteral);
      });

      it('should have the property maxHeartrate (base name: "max_heartrate")', function() {
        // TODO: update the code to test the property maxHeartrate
        expect(instance).to.have.property('maxHeartrate');
        // expect(instance.maxHeartrate).to.be(expectedValueLiteral);
      });

      it('should have the property segment (base name: "segment")', function() {
        // TODO: update the code to test the property segment
        expect(instance).to.have.property('segment');
        // expect(instance.segment).to.be(expectedValueLiteral);
      });

      it('should have the property komRank (base name: "kom_rank")', function() {
        // TODO: update the code to test the property komRank
        expect(instance).to.have.property('komRank');
        // expect(instance.komRank).to.be(expectedValueLiteral);
      });

      it('should have the property prRank (base name: "pr_rank")', function() {
        // TODO: update the code to test the property prRank
        expect(instance).to.have.property('prRank');
        // expect(instance.prRank).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

    });
  });

}));
