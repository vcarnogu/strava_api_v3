/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityType', 'model/MetaClub'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ActivityType'), require('./MetaClub'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.SummaryClub = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.ActivityType, root.StravaApiV3.MetaClub);
  }
}(this, function(ApiClient, ActivityType, MetaClub) {
  'use strict';

  /**
   * The SummaryClub model module.
   * @module model/SummaryClub
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>SummaryClub</code>.
   * @alias module:model/SummaryClub
   * @class
   * @extends module:model/MetaClub
   */
  var exports = function() {
    MetaClub.call(this);
  };

  /**
   * Constructs a <code>SummaryClub</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SummaryClub} obj Optional instance to populate.
   * @return {module:model/SummaryClub} The populated <code>SummaryClub</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      MetaClub.constructFromObject(data, obj);
      if (data.hasOwnProperty('profile_medium'))
        obj.profileMedium = ApiClient.convertToType(data['profile_medium'], 'String');
      if (data.hasOwnProperty('cover_photo'))
        obj.coverPhoto = ApiClient.convertToType(data['cover_photo'], 'String');
      if (data.hasOwnProperty('cover_photo_small'))
        obj.coverPhotoSmall = ApiClient.convertToType(data['cover_photo_small'], 'String');
      if (data.hasOwnProperty('sport_type'))
        obj.sportType = ApiClient.convertToType(data['sport_type'], 'String');
      if (data.hasOwnProperty('activity_types'))
        obj.activityTypes = ApiClient.convertToType(data['activity_types'], [ActivityType]);
      if (data.hasOwnProperty('city'))
        obj.city = ApiClient.convertToType(data['city'], 'String');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('country'))
        obj.country = ApiClient.convertToType(data['country'], 'String');
      if (data.hasOwnProperty('private'))
        obj._private = ApiClient.convertToType(data['private'], 'Boolean');
      if (data.hasOwnProperty('member_count'))
        obj.memberCount = ApiClient.convertToType(data['member_count'], 'Number');
      if (data.hasOwnProperty('featured'))
        obj.featured = ApiClient.convertToType(data['featured'], 'Boolean');
      if (data.hasOwnProperty('verified'))
        obj.verified = ApiClient.convertToType(data['verified'], 'Boolean');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
    }
    return obj;
  }

  exports.prototype = Object.create(MetaClub.prototype);
  exports.prototype.constructor = exports;
  /**
   * URL to a 60x60 pixel profile picture.
   * @member {String} profileMedium
   */
  exports.prototype.profileMedium = undefined;

  /**
   * URL to a ~1185x580 pixel cover photo.
   * @member {String} coverPhoto
   */
  exports.prototype.coverPhoto = undefined;

  /**
   * URL to a ~360x176  pixel cover photo.
   * @member {String} coverPhotoSmall
   */
  exports.prototype.coverPhotoSmall = undefined;

  /**
   * Deprecated. Prefer to use activity_types.
   * @member {module:model/SummaryClub.SportTypeEnum} sportType
   */
  exports.prototype.sportType = undefined;

  /**
   * The activity types that count for a club. This takes precedence over sport_type.
   * @member {Array.<module:model/ActivityType>} activityTypes
   */
  exports.prototype.activityTypes = undefined;

  /**
   * The club's city.
   * @member {String} city
   */
  exports.prototype.city = undefined;

  /**
   * The club's state or geographical region.
   * @member {String} state
   */
  exports.prototype.state = undefined;

  /**
   * The club's country.
   * @member {String} country
   */
  exports.prototype.country = undefined;

  /**
   * Whether the club is private.
   * @member {Boolean} _private
   */
  exports.prototype._private = undefined;

  /**
   * The club's member count.
   * @member {Number} memberCount
   */
  exports.prototype.memberCount = undefined;

  /**
   * Whether the club is featured or not.
   * @member {Boolean} featured
   */
  exports.prototype.featured = undefined;

  /**
   * Whether the club is verified or not.
   * @member {Boolean} verified
   */
  exports.prototype.verified = undefined;

  /**
   * The club's vanity URL.
   * @member {String} url
   */
  exports.prototype.url = undefined;



  /**
   * Allowed values for the <code>sportType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SportTypeEnum = {
    /**
     * value: "cycling"
     * @const
     */
    cycling: "cycling",

    /**
     * value: "running"
     * @const
     */
    running: "running",

    /**
     * value: "triathlon"
     * @const
     */
    triathlon: "triathlon",

    /**
     * value: "other"
     * @const
     */
    other: "other"
  };

  return exports;

}));
