/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MetaActivity', 'model/MetaAthlete', 'model/SummarySegment', 'model/SummarySegmentEffort'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MetaActivity'), require('./MetaAthlete'), require('./SummarySegment'), require('./SummarySegmentEffort'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.DetailedSegmentEffort = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.MetaActivity, root.StravaApiV3.MetaAthlete, root.StravaApiV3.SummarySegment, root.StravaApiV3.SummarySegmentEffort);
  }
}(this, function(ApiClient, MetaActivity, MetaAthlete, SummarySegment, SummarySegmentEffort) {
  'use strict';

  /**
   * The DetailedSegmentEffort model module.
   * @module model/DetailedSegmentEffort
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>DetailedSegmentEffort</code>.
   * @alias module:model/DetailedSegmentEffort
   * @class
   * @extends module:model/SummarySegmentEffort
   */
  var exports = function() {
    SummarySegmentEffort.call(this);
  };

  /**
   * Constructs a <code>DetailedSegmentEffort</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DetailedSegmentEffort} obj Optional instance to populate.
   * @return {module:model/DetailedSegmentEffort} The populated <code>DetailedSegmentEffort</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      SummarySegmentEffort.constructFromObject(data, obj);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('activity'))
        obj.activity = MetaActivity.constructFromObject(data['activity']);
      if (data.hasOwnProperty('athlete'))
        obj.athlete = MetaAthlete.constructFromObject(data['athlete']);
      if (data.hasOwnProperty('moving_time'))
        obj.movingTime = ApiClient.convertToType(data['moving_time'], 'Number');
      if (data.hasOwnProperty('start_index'))
        obj.startIndex = ApiClient.convertToType(data['start_index'], 'Number');
      if (data.hasOwnProperty('end_index'))
        obj.endIndex = ApiClient.convertToType(data['end_index'], 'Number');
      if (data.hasOwnProperty('average_cadence'))
        obj.averageCadence = ApiClient.convertToType(data['average_cadence'], 'Number');
      if (data.hasOwnProperty('average_watts'))
        obj.averageWatts = ApiClient.convertToType(data['average_watts'], 'Number');
      if (data.hasOwnProperty('device_watts'))
        obj.deviceWatts = ApiClient.convertToType(data['device_watts'], 'Boolean');
      if (data.hasOwnProperty('average_heartrate'))
        obj.averageHeartrate = ApiClient.convertToType(data['average_heartrate'], 'Number');
      if (data.hasOwnProperty('max_heartrate'))
        obj.maxHeartrate = ApiClient.convertToType(data['max_heartrate'], 'Number');
      if (data.hasOwnProperty('segment'))
        obj.segment = SummarySegment.constructFromObject(data['segment']);
      if (data.hasOwnProperty('kom_rank'))
        obj.komRank = ApiClient.convertToType(data['kom_rank'], 'Number');
      if (data.hasOwnProperty('pr_rank'))
        obj.prRank = ApiClient.convertToType(data['pr_rank'], 'Number');
      if (data.hasOwnProperty('hidden'))
        obj.hidden = ApiClient.convertToType(data['hidden'], 'Boolean');
    }
    return obj;
  }

  exports.prototype = Object.create(SummarySegmentEffort.prototype);
  exports.prototype.constructor = exports;
  /**
   * The name of the segment on which this effort was performed
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * @member {module:model/MetaActivity} activity
   */
  exports.prototype.activity = undefined;

  /**
   * @member {module:model/MetaAthlete} athlete
   */
  exports.prototype.athlete = undefined;

  /**
   * The effort's moving time
   * @member {Number} movingTime
   */
  exports.prototype.movingTime = undefined;

  /**
   * The start index of this effort in its activity's stream
   * @member {Number} startIndex
   */
  exports.prototype.startIndex = undefined;

  /**
   * The end index of this effort in its activity's stream
   * @member {Number} endIndex
   */
  exports.prototype.endIndex = undefined;

  /**
   * The effort's average cadence
   * @member {Number} averageCadence
   */
  exports.prototype.averageCadence = undefined;

  /**
   * The average wattage of this effort
   * @member {Number} averageWatts
   */
  exports.prototype.averageWatts = undefined;

  /**
   * For riding efforts, whether the wattage was reported by a dedicated recording device
   * @member {Boolean} deviceWatts
   */
  exports.prototype.deviceWatts = undefined;

  /**
   * The heart heart rate of the athlete during this effort
   * @member {Number} averageHeartrate
   */
  exports.prototype.averageHeartrate = undefined;

  /**
   * The maximum heart rate of the athlete during this effort
   * @member {Number} maxHeartrate
   */
  exports.prototype.maxHeartrate = undefined;

  /**
   * @member {module:model/SummarySegment} segment
   */
  exports.prototype.segment = undefined;

  /**
   * The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
   * @member {Number} komRank
   */
  exports.prototype.komRank = undefined;

  /**
   * The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload
   * @member {Number} prRank
   */
  exports.prototype.prRank = undefined;

  /**
   * Whether this effort should be hidden when viewed within an activity
   * @member {Boolean} hidden
   */
  exports.prototype.hidden = undefined;


  return exports;

}));
