/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LatLng', 'model/PolylineMap', 'model/SummaryPRSegmentEffort', 'model/SummarySegment', 'model/SummarySegmentEffort'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LatLng'), require('./PolylineMap'), require('./SummaryPRSegmentEffort'), require('./SummarySegment'), require('./SummarySegmentEffort'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.DetailedSegment = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.LatLng, root.StravaApiV3.PolylineMap, root.StravaApiV3.SummaryPRSegmentEffort, root.StravaApiV3.SummarySegment, root.StravaApiV3.SummarySegmentEffort);
  }
}(this, function(ApiClient, LatLng, PolylineMap, SummaryPRSegmentEffort, SummarySegment, SummarySegmentEffort) {
  'use strict';

  /**
   * The DetailedSegment model module.
   * @module model/DetailedSegment
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>DetailedSegment</code>.
   * @alias module:model/DetailedSegment
   * @class
   * @extends module:model/SummarySegment
   */
  var exports = function() {
    SummarySegment.call(this);
  };

  /**
   * Constructs a <code>DetailedSegment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DetailedSegment} obj Optional instance to populate.
   * @return {module:model/DetailedSegment} The populated <code>DetailedSegment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      SummarySegment.constructFromObject(data, obj);
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'Date');
      if (data.hasOwnProperty('total_elevation_gain'))
        obj.totalElevationGain = ApiClient.convertToType(data['total_elevation_gain'], 'Number');
      if (data.hasOwnProperty('map'))
        obj.map = PolylineMap.constructFromObject(data['map']);
      if (data.hasOwnProperty('effort_count'))
        obj.effortCount = ApiClient.convertToType(data['effort_count'], 'Number');
      if (data.hasOwnProperty('athlete_count'))
        obj.athleteCount = ApiClient.convertToType(data['athlete_count'], 'Number');
      if (data.hasOwnProperty('hazardous'))
        obj.hazardous = ApiClient.convertToType(data['hazardous'], 'Boolean');
      if (data.hasOwnProperty('star_count'))
        obj.starCount = ApiClient.convertToType(data['star_count'], 'Number');
    }
    return obj;
  }

  exports.prototype = Object.create(SummarySegment.prototype);
  exports.prototype.constructor = exports;
  /**
   * The time at which the segment was created.
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * The time at which the segment was last updated.
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * The segment's total elevation gain.
   * @member {Number} totalElevationGain
   */
  exports.prototype.totalElevationGain = undefined;

  /**
   * @member {module:model/PolylineMap} map
   */
  exports.prototype.map = undefined;

  /**
   * The total number of efforts for this segment
   * @member {Number} effortCount
   */
  exports.prototype.effortCount = undefined;

  /**
   * The number of unique athletes who have an effort for this segment
   * @member {Number} athleteCount
   */
  exports.prototype.athleteCount = undefined;

  /**
   * Whether this segment is considered hazardous
   * @member {Boolean} hazardous
   */
  exports.prototype.hazardous = undefined;

  /**
   * The number of stars for this segment
   * @member {Number} starCount
   */
  exports.prototype.starCount = undefined;


  return exports;

}));
