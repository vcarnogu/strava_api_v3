/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AltitudeStream', 'model/CadenceStream', 'model/DistanceStream', 'model/HeartrateStream', 'model/LatLngStream', 'model/MovingStream', 'model/PowerStream', 'model/SmoothGradeStream', 'model/SmoothVelocityStream', 'model/TemperatureStream', 'model/TimeStream'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AltitudeStream'), require('./CadenceStream'), require('./DistanceStream'), require('./HeartrateStream'), require('./LatLngStream'), require('./MovingStream'), require('./PowerStream'), require('./SmoothGradeStream'), require('./SmoothVelocityStream'), require('./TemperatureStream'), require('./TimeStream'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.StreamSet = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.AltitudeStream, root.StravaApiV3.CadenceStream, root.StravaApiV3.DistanceStream, root.StravaApiV3.HeartrateStream, root.StravaApiV3.LatLngStream, root.StravaApiV3.MovingStream, root.StravaApiV3.PowerStream, root.StravaApiV3.SmoothGradeStream, root.StravaApiV3.SmoothVelocityStream, root.StravaApiV3.TemperatureStream, root.StravaApiV3.TimeStream);
  }
}(this, function(ApiClient, AltitudeStream, CadenceStream, DistanceStream, HeartrateStream, LatLngStream, MovingStream, PowerStream, SmoothGradeStream, SmoothVelocityStream, TemperatureStream, TimeStream) {
  'use strict';

  /**
   * The StreamSet model module.
   * @module model/StreamSet
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>StreamSet</code>.
   * @alias module:model/StreamSet
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>StreamSet</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StreamSet} obj Optional instance to populate.
   * @return {module:model/StreamSet} The populated <code>StreamSet</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('time'))
        obj.time = TimeStream.constructFromObject(data['time']);
      if (data.hasOwnProperty('distance'))
        obj.distance = DistanceStream.constructFromObject(data['distance']);
      if (data.hasOwnProperty('latlng'))
        obj.latlng = LatLngStream.constructFromObject(data['latlng']);
      if (data.hasOwnProperty('altitude'))
        obj.altitude = AltitudeStream.constructFromObject(data['altitude']);
      if (data.hasOwnProperty('velocity_smooth'))
        obj.velocitySmooth = SmoothVelocityStream.constructFromObject(data['velocity_smooth']);
      if (data.hasOwnProperty('heartrate'))
        obj.heartrate = HeartrateStream.constructFromObject(data['heartrate']);
      if (data.hasOwnProperty('cadence'))
        obj.cadence = CadenceStream.constructFromObject(data['cadence']);
      if (data.hasOwnProperty('watts'))
        obj.watts = PowerStream.constructFromObject(data['watts']);
      if (data.hasOwnProperty('temp'))
        obj.temp = TemperatureStream.constructFromObject(data['temp']);
      if (data.hasOwnProperty('moving'))
        obj.moving = MovingStream.constructFromObject(data['moving']);
      if (data.hasOwnProperty('grade_smooth'))
        obj.gradeSmooth = SmoothGradeStream.constructFromObject(data['grade_smooth']);
    }
    return obj;
  }

  /**
   * @member {module:model/TimeStream} time
   */
  exports.prototype.time = undefined;

  /**
   * @member {module:model/DistanceStream} distance
   */
  exports.prototype.distance = undefined;

  /**
   * @member {module:model/LatLngStream} latlng
   */
  exports.prototype.latlng = undefined;

  /**
   * @member {module:model/AltitudeStream} altitude
   */
  exports.prototype.altitude = undefined;

  /**
   * @member {module:model/SmoothVelocityStream} velocitySmooth
   */
  exports.prototype.velocitySmooth = undefined;

  /**
   * @member {module:model/HeartrateStream} heartrate
   */
  exports.prototype.heartrate = undefined;

  /**
   * @member {module:model/CadenceStream} cadence
   */
  exports.prototype.cadence = undefined;

  /**
   * @member {module:model/PowerStream} watts
   */
  exports.prototype.watts = undefined;

  /**
   * @member {module:model/TemperatureStream} temp
   */
  exports.prototype.temp = undefined;

  /**
   * @member {module:model/MovingStream} moving
   */
  exports.prototype.moving = undefined;

  /**
   * @member {module:model/SmoothGradeStream} gradeSmooth
   */
  exports.prototype.gradeSmooth = undefined;


  return exports;

}));
