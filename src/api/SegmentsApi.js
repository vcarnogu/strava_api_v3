/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DetailedSegment', 'model/ExplorerResponse', 'model/Fault', 'model/SummarySegment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DetailedSegment'), require('../model/ExplorerResponse'), require('../model/Fault'), require('../model/SummarySegment'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.SegmentsApi = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.DetailedSegment, root.StravaApiV3.ExplorerResponse, root.StravaApiV3.Fault, root.StravaApiV3.SummarySegment);
  }
}(this, function(ApiClient, DetailedSegment, ExplorerResponse, Fault, SummarySegment) {
  'use strict';

  /**
   * Segments service.
   * @module api/SegmentsApi
   * @version 3.0.0
   */

  /**
   * Constructs a new SegmentsApi. 
   * @alias module:api/SegmentsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the exploreSegments operation.
     * @callback module:api/SegmentsApi~exploreSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExplorerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Explore segments
     * Returns the top 10 segments matching a specified query.
     * @param {Array.<Number>} bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.activityType Desired activity type.
     * @param {Number} opts.minCat The minimum climbing category.
     * @param {Number} opts.maxCat The maximum climbing category.
     * @param {module:api/SegmentsApi~exploreSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExplorerResponse}
     */
    this.exploreSegments = function(bounds, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bounds' is set
      if (bounds === undefined || bounds === null) {
        throw new Error("Missing the required parameter 'bounds' when calling exploreSegments");
      }


      var pathParams = {
      };
      var queryParams = {
        'activity_type': opts['activityType'],
        'min_cat': opts['minCat'],
        'max_cat': opts['maxCat'],
      };
      var collectionQueryParams = {
        'bounds': {
          value: bounds,
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ExplorerResponse;

      return this.apiClient.callApi(
        '/segments/explore', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggedInAthleteStarredSegments operation.
     * @callback module:api/SegmentsApi~getLoggedInAthleteStarredSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SummarySegment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Starred Segments
     * List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number. Defaults to 1.
     * @param {Number} opts.perPage Number of items per page. Defaults to 30. (default to 30)
     * @param {module:api/SegmentsApi~getLoggedInAthleteStarredSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SummarySegment>}
     */
    this.getLoggedInAthleteStarredSegments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SummarySegment];

      return this.apiClient.callApi(
        '/segments/starred', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentById operation.
     * @callback module:api/SegmentsApi~getSegmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedSegment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Segment
     * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
     * @param {Number} id The identifier of the segment.
     * @param {module:api/SegmentsApi~getSegmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedSegment}
     */
    this.getSegmentById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSegmentById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DetailedSegment;

      return this.apiClient.callApi(
        '/segments/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the starSegment operation.
     * @callback module:api/SegmentsApi~starSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedSegment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Star Segment
     * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
     * @param {Number} id The identifier of the segment to star.
     * @param {Boolean} starred If true, star the segment; if false, unstar the segment.
     * @param {module:api/SegmentsApi~starSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedSegment}
     */
    this.starSegment = function(id, starred, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling starSegment");
      }

      // verify the required parameter 'starred' is set
      if (starred === undefined || starred === null) {
        throw new Error("Missing the required parameter 'starred' when calling starSegment");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'starred': starred
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DetailedSegment;

      return this.apiClient.callApi(
        '/segments/{id}/starred', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
